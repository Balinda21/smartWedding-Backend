generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CLIENT
  PHOTOGRAPHER
  VENDOR
}

model User {
  id          Int      @id @default(sequence())
  email       String   @unique
  password    String
  name        String?
  role        UserRole @default(CLIENT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([email])
}

model Venue {
  id            Int       @id @default(sequence())
  name          String
  description   String
  location      String
  address       String
  capacity      Int       
  price         Float     
  images        String[]  
  amenities     String[]  
  isAvailable   Boolean   @default(true)
  features      String[]  
  squareFootage Int?      
  parkingSpaces Int?      
  
  hasIndoorSpace     Boolean   @default(true)
  hasOutdoorSpace    Boolean   @default(true)
  indoorCapacity     Int?
  outdoorCapacity    Int?
  
  minimumHours       Int       @default(4)  
  setupTime          Int       @default(2)  
  cleanupTime        Int       @default(1)  
  availableDays      String[]  
  
  depositRequired    Float     
  cancellationPolicy String
  insuranceRequired  Boolean   @default(true)
  noiseRestrictions String?
  
  allowsExternalCatering Boolean @default(true)
  preferredVendors     String[]  
  
  providesSeating      Boolean   @default(true)
  seatingCapacity      Int?
  providesCatering     Boolean   @default(false)
  providesDecor        Boolean   @default(false)
  
  contactName     String
  contactEmail    String
  contactPhone    String
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([location])
  @@index([price])
  @@index([capacity])
}
// prisma/schema.prisma
model Photographer {
  id          Int      @id @default(sequence())
  name        String
  email       String   @unique
  phone       String
  location    String
  specialties String[]  // e.g., ["Wedding", "Pre-wedding", "Traditional"]
  portfolio   String[]  // Array of image URLs
  price       Float     // Base price for services
  packages    Json      // Single JSON field containing array of packages
  experience  Int       // Years of experience
  rating      Float?    // Average rating
  available   Boolean   @default(true)
  bio         String    // Brief description/bio
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([location])
  @@index([price])
}

model Cake {
  id              Int      @id @default(sequence())
  name            String   // Name of the baker/bakery
  email           String   @unique
  phone           String
  location        String
  description     String   // About the baker/bakery
  specialties     String[] // e.g., ["Wedding Cakes", "Cupcakes", "Custom Design"]
  portfolio       String[] // Images of previous cakes
  priceRange      Json     // e.g., {"min": 300, "max": 3000}
  servingSizes    Json     // e.g., {"50": 400, "100": 700, "150": 1000}
  flavors         String[] // Available cake flavors
  fillings        String[] // Available fillings
  designs         String[] // Types of designs offered
  dietaryOptions  String[] // e.g., ["Gluten-Free", "Vegan", "Dairy-Free"]
  leadTime        Int      // Required notice in days
  available       Boolean  @default(true)
  tastingPrice    Float?   // Cost of tasting session if any
  deliveryFee     Float?
  rating          Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([location])
  @@index([name])
}

model DJ {
  id              Int      @id @default(sequence())
  name            String   // DJ name or company name
  email           String   @unique
  phone           String
  location        String
  description     String
  experience      Int      // Years of experience
  portfolio       String[] // Audio/video samples URLs
  price           Float    // Base price per event
  packages        Json     // Different packages offered
  musicGenres     String[] // Genres they specialize in
  equipment       String[] // Equipment they provide
  eventTypes      String[] // Types of events they service
  setupTime       Int      // Setup time needed in hours
  performanceTime Int      // Standard performance duration in hours
  available       Boolean  @default(true)
  rating          Float?
  reviews         Json?    // Store some featured reviews
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([location])
  @@index([price])
}
